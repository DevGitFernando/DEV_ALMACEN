//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.296
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.296.
// 
#pragma warning disable 1591

namespace Test.wsInformacion {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsInformacionSoap", Namespace="http://SC-Solutions/ServiciosWeb/")]
    public partial class wsInformacion : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestConexionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListaDeClavesLicitadasOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsumosOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsInformacion() {
            this.Url = global::Test.Properties.Settings.Default.Test_wsInformacion_wsInformacion;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestConexionCompletedEventHandler TestConexionCompleted;
        
        /// <remarks/>
        public event ListaDeClavesLicitadasCompletedEventHandler ListaDeClavesLicitadasCompleted;
        
        /// <remarks/>
        public event ConsumosCompletedEventHandler ConsumosCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SC-Solutions/ServiciosWeb/TestConexion", RequestNamespace="http://SC-Solutions/ServiciosWeb/", ResponseNamespace="http://SC-Solutions/ServiciosWeb/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestConexion() {
            object[] results = this.Invoke("TestConexion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestConexionAsync() {
            this.TestConexionAsync(null);
        }
        
        /// <remarks/>
        public void TestConexionAsync(object userState) {
            if ((this.TestConexionOperationCompleted == null)) {
                this.TestConexionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConexionOperationCompleted);
            }
            this.InvokeAsync("TestConexion", new object[0], this.TestConexionOperationCompleted, userState);
        }
        
        private void OnTestConexionOperationCompleted(object arg) {
            if ((this.TestConexionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConexionCompleted(this, new TestConexionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SC-Solutions/ServiciosWeb/ListaDeClavesLicitadas", RequestNamespace="http://SC-Solutions/ServiciosWeb/", ResponseNamespace="http://SC-Solutions/ServiciosWeb/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ListaDeClavesLicitadas(int ClaveAcceso) {
            object[] results = this.Invoke("ListaDeClavesLicitadas", new object[] {
                        ClaveAcceso});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ListaDeClavesLicitadasAsync(int ClaveAcceso) {
            this.ListaDeClavesLicitadasAsync(ClaveAcceso, null);
        }
        
        /// <remarks/>
        public void ListaDeClavesLicitadasAsync(int ClaveAcceso, object userState) {
            if ((this.ListaDeClavesLicitadasOperationCompleted == null)) {
                this.ListaDeClavesLicitadasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListaDeClavesLicitadasOperationCompleted);
            }
            this.InvokeAsync("ListaDeClavesLicitadas", new object[] {
                        ClaveAcceso}, this.ListaDeClavesLicitadasOperationCompleted, userState);
        }
        
        private void OnListaDeClavesLicitadasOperationCompleted(object arg) {
            if ((this.ListaDeClavesLicitadasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListaDeClavesLicitadasCompleted(this, new ListaDeClavesLicitadasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SC-Solutions/ServiciosWeb/Consumos", RequestNamespace="http://SC-Solutions/ServiciosWeb/", ResponseNamespace="http://SC-Solutions/ServiciosWeb/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Consumos(int ClaveAcceso, string FechaInicial, string FechaFinal) {
            object[] results = this.Invoke("Consumos", new object[] {
                        ClaveAcceso,
                        FechaInicial,
                        FechaFinal});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ConsumosAsync(int ClaveAcceso, string FechaInicial, string FechaFinal) {
            this.ConsumosAsync(ClaveAcceso, FechaInicial, FechaFinal, null);
        }
        
        /// <remarks/>
        public void ConsumosAsync(int ClaveAcceso, string FechaInicial, string FechaFinal, object userState) {
            if ((this.ConsumosOperationCompleted == null)) {
                this.ConsumosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsumosOperationCompleted);
            }
            this.InvokeAsync("Consumos", new object[] {
                        ClaveAcceso,
                        FechaInicial,
                        FechaFinal}, this.ConsumosOperationCompleted, userState);
        }
        
        private void OnConsumosOperationCompleted(object arg) {
            if ((this.ConsumosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsumosCompleted(this, new ConsumosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TestConexionCompletedEventHandler(object sender, TestConexionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConexionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConexionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListaDeClavesLicitadasCompletedEventHandler(object sender, ListaDeClavesLicitadasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListaDeClavesLicitadasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListaDeClavesLicitadasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConsumosCompletedEventHandler(object sender, ConsumosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConsumosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConsumosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591