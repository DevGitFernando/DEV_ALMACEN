//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TestMA.wsIMediaccess {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsServiciosMediaccessSoap", Namespace="http://SC-Solutions/ServiciosWeb/")]
    public partial class wsServiciosMediaccess : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback BusquedaMedicamentosxIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublicacionReMOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsServiciosMediaccess() {
            this.Url = global::TestMA.Properties.Settings.Default.TestMA_wsIMediaccess_wsServiciosMediaccess;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event BusquedaMedicamentosxIDCompletedEventHandler BusquedaMedicamentosxIDCompleted;
        
        /// <remarks/>
        public event PublicacionReMCompletedEventHandler PublicacionReMCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SC-Solutions/ServiciosWeb/BusquedaMedicamentosxID", RequestNamespace="http://SC-Solutions/ServiciosWeb/", ResponseNamespace="http://SC-Solutions/ServiciosWeb/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BusquedaMedicamentosxID(int Id, int Tipo, string Plan, string IdFarmacia) {
            object[] results = this.Invoke("BusquedaMedicamentosxID", new object[] {
                        Id,
                        Tipo,
                        Plan,
                        IdFarmacia});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BusquedaMedicamentosxIDAsync(int Id, int Tipo, string Plan, string IdFarmacia) {
            this.BusquedaMedicamentosxIDAsync(Id, Tipo, Plan, IdFarmacia, null);
        }
        
        /// <remarks/>
        public void BusquedaMedicamentosxIDAsync(int Id, int Tipo, string Plan, string IdFarmacia, object userState) {
            if ((this.BusquedaMedicamentosxIDOperationCompleted == null)) {
                this.BusquedaMedicamentosxIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBusquedaMedicamentosxIDOperationCompleted);
            }
            this.InvokeAsync("BusquedaMedicamentosxID", new object[] {
                        Id,
                        Tipo,
                        Plan,
                        IdFarmacia}, this.BusquedaMedicamentosxIDOperationCompleted, userState);
        }
        
        private void OnBusquedaMedicamentosxIDOperationCompleted(object arg) {
            if ((this.BusquedaMedicamentosxIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BusquedaMedicamentosxIDCompleted(this, new BusquedaMedicamentosxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SC-Solutions/ServiciosWeb/PublicacionReM", RequestNamespace="http://SC-Solutions/ServiciosWeb/", ResponseNamespace="http://SC-Solutions/ServiciosWeb/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PublicacionReM(long Folio, string IdFarmacia, string Paciente, string Medico, string Especialidad, int Copago, string Plan, string Fecha, string Eligibilidad, string ICD1, string ICD2, string ICD3, string ICD4, string Datos_Receta) {
            object[] results = this.Invoke("PublicacionReM", new object[] {
                        Folio,
                        IdFarmacia,
                        Paciente,
                        Medico,
                        Especialidad,
                        Copago,
                        Plan,
                        Fecha,
                        Eligibilidad,
                        ICD1,
                        ICD2,
                        ICD3,
                        ICD4,
                        Datos_Receta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PublicacionReMAsync(long Folio, string IdFarmacia, string Paciente, string Medico, string Especialidad, int Copago, string Plan, string Fecha, string Eligibilidad, string ICD1, string ICD2, string ICD3, string ICD4, string Datos_Receta) {
            this.PublicacionReMAsync(Folio, IdFarmacia, Paciente, Medico, Especialidad, Copago, Plan, Fecha, Eligibilidad, ICD1, ICD2, ICD3, ICD4, Datos_Receta, null);
        }
        
        /// <remarks/>
        public void PublicacionReMAsync(long Folio, string IdFarmacia, string Paciente, string Medico, string Especialidad, int Copago, string Plan, string Fecha, string Eligibilidad, string ICD1, string ICD2, string ICD3, string ICD4, string Datos_Receta, object userState) {
            if ((this.PublicacionReMOperationCompleted == null)) {
                this.PublicacionReMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublicacionReMOperationCompleted);
            }
            this.InvokeAsync("PublicacionReM", new object[] {
                        Folio,
                        IdFarmacia,
                        Paciente,
                        Medico,
                        Especialidad,
                        Copago,
                        Plan,
                        Fecha,
                        Eligibilidad,
                        ICD1,
                        ICD2,
                        ICD3,
                        ICD4,
                        Datos_Receta}, this.PublicacionReMOperationCompleted, userState);
        }
        
        private void OnPublicacionReMOperationCompleted(object arg) {
            if ((this.PublicacionReMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublicacionReMCompleted(this, new PublicacionReMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void BusquedaMedicamentosxIDCompletedEventHandler(object sender, BusquedaMedicamentosxIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BusquedaMedicamentosxIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BusquedaMedicamentosxIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PublicacionReMCompletedEventHandler(object sender, PublicacionReMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublicacionReMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublicacionReMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591